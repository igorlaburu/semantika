version: '3.8'

services:
  semantika-api:
    build: .
    container_name: semantika-api
    command: "uvicorn server:app --host 0.0.0.0 --port 8000 --reload"
    ports:
      - "8000:8000"
    env_file:
      - .env
    environment:
      - QDRANT_URL=http://qdrant:6333
    volumes:
      - .:/app  # Mount for development hot-reload
    depends_on:
      qdrant:
        condition: service_healthy
    restart: unless-stopped
    networks:
      - semantika-network

  semantika-scheduler:
    build: .
    container_name: semantika-scheduler
    command: "python scheduler.py"
    env_file:
      - .env
    environment:
      - QDRANT_URL=http://qdrant:6333
    volumes:
      - .:/app  # Mount for development hot-reload
    depends_on:
      qdrant:
        condition: service_healthy
    restart: unless-stopped
    networks:
      - semantika-network

  qdrant:
    image: qdrant/qdrant:latest
    container_name: qdrant
    ports:
      - "6333:6333"
      - "6334:6334"  # gRPC port
    volumes:
      - ./qdrant_storage:/qdrant/storage
    environment:
      - QDRANT__SERVICE__HTTP_PORT=6333
      - QDRANT__SERVICE__GRPC_PORT=6334
    healthcheck:
      test: ["CMD", "wget", "--spider", "-q", "http://localhost:6333/health"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 10s
    restart: unless-stopped
    networks:
      - semantika-network

  dozzle:
    image: amir20/dozzle:latest
    container_name: dozzle
    ports:
      - "8081:8080"
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock:ro
    environment:
      - DOZZLE_LEVEL=info
      - DOZZLE_TAILSIZE=300
      - DOZZLE_FILTER=name=semantika
    restart: unless-stopped
    networks:
      - semantika-network

networks:
  semantika-network:
    driver: bridge

volumes:
  qdrant_storage:
