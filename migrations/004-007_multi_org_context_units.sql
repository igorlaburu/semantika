-- =====================================================================
-- Migrations 004-007: Multi-Organization Context Units
-- =====================================================================
-- Creates tables for:
-- - Organizations (media outlets with multiple input channels)
-- - Users (belonging to organizations)
-- - Context Units (structured information extracted from sources)
-- - Links existing clients to organizations
-- =====================================================================

-- =====================================================================
-- Migration 004: Create organizations table
-- =====================================================================

CREATE TABLE IF NOT EXISTS organizations (
  id UUID PRIMARY KEY DEFAULT uuid_generate_v4(),
  slug VARCHAR(100) UNIQUE NOT NULL,
  name VARCHAR(255) NOT NULL,
  created_at TIMESTAMP DEFAULT NOW(),
  is_active BOOLEAN DEFAULT true,

  -- Channel configuration (flexible JSONB for different source types)
  -- Example: {"email": {"addresses": ["news@org.com"], "enabled": true}}
  channels JSONB DEFAULT '{}',

  -- Processing settings
  -- Example: {"language": "es", "store_in_qdrant": false}
  settings JSONB DEFAULT '{}'
);

-- Constraint: slug validation (alphanumeric, hyphens, dots only)
ALTER TABLE organizations ADD CONSTRAINT slug_format
  CHECK (slug ~ '^[a-zA-Z0-9\-\.]+$');

-- Constraint: slug length
ALTER TABLE organizations ADD CONSTRAINT slug_length
  CHECK (char_length(slug) >= 3 AND char_length(slug) <= 100);

-- Indexes
CREATE INDEX idx_organizations_slug ON organizations(slug);
CREATE INDEX idx_organizations_is_active ON organizations(is_active);

-- GIN index for channels JSONB queries
CREATE INDEX idx_organizations_channels ON organizations USING gin(channels);

-- Comments
COMMENT ON TABLE organizations IS 'Organizations with multiple content input channels';
COMMENT ON COLUMN organizations.slug IS 'URL-safe identifier (3-100 chars, alphanumeric + hyphen + dot)';
COMMENT ON COLUMN organizations.channels IS 'JSONB config for email, webhook, file, API sources';
COMMENT ON COLUMN organizations.settings IS 'JSONB processing settings (language, storage, etc.)';


-- =====================================================================
-- Migration 005: Create users table
-- =====================================================================

CREATE TABLE IF NOT EXISTS users (
  id UUID PRIMARY KEY DEFAULT uuid_generate_v4(),
  email VARCHAR(255) UNIQUE NOT NULL,
  name VARCHAR(255),
  organization_id UUID REFERENCES organizations(id) ON DELETE CASCADE,
  role VARCHAR(50) DEFAULT 'member',
  created_at TIMESTAMP DEFAULT NOW(),
  is_active BOOLEAN DEFAULT true
);

-- Constraint: email format validation
ALTER TABLE users ADD CONSTRAINT email_format
  CHECK (email ~* '^[A-Za-z0-9._%+-]+@[A-Za-z0-9.-]+\.[A-Za-z]{2,}$');

-- Constraint: role validation
ALTER TABLE users ADD CONSTRAINT role_valid
  CHECK (role IN ('admin', 'editor', 'member'));

-- Indexes
CREATE INDEX idx_users_email ON users(email);
CREATE INDEX idx_users_org ON users(organization_id);
CREATE INDEX idx_users_is_active ON users(is_active);

-- Comments
COMMENT ON TABLE users IS 'Users associated with organizations';
COMMENT ON COLUMN users.role IS 'User role: admin, editor, or member';
COMMENT ON COLUMN users.organization_id IS 'Organization this user belongs to';


-- =====================================================================
-- Migration 006: Create context_units table
-- =====================================================================

CREATE TABLE IF NOT EXISTS context_units (
  id UUID PRIMARY KEY DEFAULT uuid_generate_v4(),
  organization_id UUID REFERENCES organizations(id) ON DELETE CASCADE,

  -- Source metadata
  source_type VARCHAR(50) NOT NULL,         -- "email", "api", "file", "webhook"
  source_id VARCHAR(255),                   -- Email message ID, API request ID, file path, etc.
  source_metadata JSONB,                    -- Full source data (from, to, subject, etc.)

  -- Context unit content (generated by LLM)
  title TEXT,
  summary TEXT,
  tags TEXT[],
  atomic_statements JSONB,                  -- Ordered array of statement objects

  -- Processing status
  status VARCHAR(50) DEFAULT 'pending',     -- 'pending', 'processing', 'completed', 'failed'
  error TEXT,

  -- Timestamps
  created_at TIMESTAMP DEFAULT NOW(),
  processed_at TIMESTAMP,

  -- Optional: Vector storage reference
  qdrant_point_id UUID
);

-- Constraint: source_type validation
ALTER TABLE context_units ADD CONSTRAINT source_type_valid
  CHECK (source_type IN ('email', 'api', 'file', 'webhook'));

-- Constraint: status validation
ALTER TABLE context_units ADD CONSTRAINT status_valid
  CHECK (status IN ('pending', 'processing', 'completed', 'failed'));

-- Indexes
CREATE INDEX idx_context_units_org ON context_units(organization_id);
CREATE INDEX idx_context_units_status ON context_units(status);
CREATE INDEX idx_context_units_source_type ON context_units(source_type);
CREATE INDEX idx_context_units_created_at ON context_units(created_at DESC);

-- GIN indexes for JSONB and array queries
CREATE INDEX idx_context_units_tags ON context_units USING gin(tags);
CREATE INDEX idx_context_units_source_metadata ON context_units USING gin(source_metadata);
CREATE INDEX idx_context_units_atomic_statements ON context_units USING gin(atomic_statements);

-- Comments
COMMENT ON TABLE context_units IS 'Structured information units extracted from various sources';
COMMENT ON COLUMN context_units.source_type IS 'Type of source: email, api, file, or webhook';
COMMENT ON COLUMN context_units.source_id IS 'Unique identifier from source system';
COMMENT ON COLUMN context_units.atomic_statements IS 'JSONB array: [{"order": 1, "type": "fact", "speaker": null, "text": "..."}]';
COMMENT ON COLUMN context_units.qdrant_point_id IS 'Reference to vector in Qdrant (if stored)';

-- Example atomic_statements structure:
-- [
--   {"order": 1, "type": "fact", "speaker": null, "text": "Statement text"},
--   {"order": 2, "type": "question", "speaker": "Reporter", "text": "Question?"},
--   {"order": 3, "type": "answer", "speaker": "Mayor", "text": "Answer."}
-- ]
-- Allowed types: fact, question, answer, quote, context


-- =====================================================================
-- Migration 007: Link clients to organizations
-- =====================================================================

ALTER TABLE clients ADD COLUMN IF NOT EXISTS organization_id UUID REFERENCES organizations(id);

CREATE INDEX IF NOT EXISTS idx_clients_org ON clients(organization_id);

COMMENT ON COLUMN clients.organization_id IS 'Optional: Link client (API key) to organization';


-- =====================================================================
-- End of migrations
-- =====================================================================
